from django.core.exceptions import PermissionDenied
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse_lazy
from django.views.generic import ListView, CreateView, UpdateView, DetailView, DeleteView
from .models import Tip
from .forms import TipForm
from ..common.models import LikeDislike
from ..tags.models import Tag
from django.contrib.auth.decorators import login_required

class AllTipsView(ListView):
    model = Tip
    template_name = 'tips/tip-list-page.html'
    context_object_name = 'tips'

    def get_queryset(self):
        # Fetch all tips for public viewing (no filtering)
        return Tip.objects.all()


class CreateTipView(CreateView):
    model = Tip
    form_class = TipForm
    template_name = 'tips/tip-add-page.html'
    success_url = reverse_lazy('all_tips')

    def form_valid(self, form):
        form.instance.author = self.request.user
        response = super().form_valid(form)

        # Process tags
        tags_input = self.request.POST.get('tags')
        if tags_input:
            tags = [tag.strip() for tag in tags_input.split(',')]
            tag_objects = []
            for tag in tags:
                tag_obj, created = Tag.objects.get_or_create(name=tag)
                tag_objects.append(tag_obj)
            form.instance.tags.set(tag_objects)

        return response


class EditTipView(UpdateView):
    model = Tip
    form_class = TipForm
    template_name = 'tips/tip-edit-page.html'
    context_object_name = 'tip'
    success_url = reverse_lazy('all_tips')

    def get_queryset(self):
        # Only allow authors to edit their own tips
        return Tip.objects.filter(author=self.request.user)

    def form_valid(self, form):
        form.instance.author = self.request.user
        response = super().form_valid(form)

        # Process tags
        tags_input = self.request.POST.get('tags')
        if tags_input:
            tags = [tag.strip() for tag in tags_input.split(',')]
            tag_objects = []
            for tag in tags:
                tag_obj, created = Tag.objects.get_or_create(name=tag)
                tag_objects.append(tag_obj)
            form.instance.tags.set(tag_objects)

        return response


class TipDetailView(DetailView):
    model = Tip
    template_name = 'tips/tip-view-page.html'
    context_object_name = 'tip'

    def get_object(self, queryset=None):
        # Allow all authenticated users to view the tip
        obj = super().get_object(queryset)
        if obj.author != self.request.user and not self.request.user.is_superuser:
            # Only the author or superuser can edit/delete, but viewing is open
            pass
        return obj


class TipDeleteView(DeleteView):
    model = Tip
    template_name = 'tips/tip-delete-page.html'
    context_object_name = 'tip'
    success_url = reverse_lazy('all_tips')  # Redirect to All Tips after deletion

    def get_queryset(self):
        # Ensure only the author or superuser can delete the tip
        return Tip.objects.filter(author=self.request.user)

    def form_valid(self, form):
        # You can perform additional checks before deletion if needed
        return super().form_valid(form)


@login_required
def like_tip(request, pk):
    tip = get_object_or_404(Tip, pk=pk)
    like_dislike, created = LikeDislike.objects.get_or_create(user=request.user, tip=tip)
    if like_dislike.action == LikeDislike.LIKE:
        like_dislike.delete()  # Remove like
    else:
        # Remove dislike if present and add like
        LikeDislike.objects.filter(user=request.user, tip=tip, action=LikeDislike.DISLIKE).delete()
        like_dislike.action = LikeDislike.LIKE
        like_dislike.save()
    return redirect('tip_detail', pk=tip.pk)


@login_required
def dislike_tip(request, pk):
    tip = get_object_or_404(Tip, pk=pk)
    like_dislike, created = LikeDislike.objects.get_or_create(user=request.user, tip=tip)
    if like_dislike.action == LikeDislike.DISLIKE:
        like_dislike.delete()  # Remove dislike
    else:
        # Remove like if present and add dislike
        LikeDislike.objects.filter(user=request.user, tip=tip, action=LikeDislike.LIKE).delete()
        like_dislike.action = LikeDislike.DISLIKE
        like_dislike.save()
    return redirect('tip_detail', pk=tip.pk)