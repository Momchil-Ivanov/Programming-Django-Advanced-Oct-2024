from django.core.exceptions import PermissionDenied
from django.shortcuts import get_object_or_404, redirect
from django.urls import reverse_lazy
from django.views.generic import ListView, CreateView, UpdateView, DetailView, DeleteView
from .models import Tip
from .forms import TipForm
from ..tags.models import Tag
from django.contrib.auth.decorators import login_required

class AllTipsView(ListView):
    model = Tip
    template_name = 'tips/tip-list-page.html'
    context_object_name = 'tips'

    def get_queryset(self):
        # Fetch all tips regardless of the author for public access
        return Tip.objects.all()

class CreateTipView(CreateView):
    model = Tip
    form_class = TipForm
    template_name = 'tips/tip-add-page.html'
    success_url = reverse_lazy('all_tips')

    def form_valid(self, form):
        form.instance.author = self.request.user
        response = super().form_valid(form)

        # Process tags
        tags_input = self.request.POST.get('tags')
        if tags_input:
            tags = [tag.strip() for tag in tags_input.split(',')]
            tag_objects = []
            for tag in tags:
                tag_obj, created = Tag.objects.get_or_create(name=tag)
                tag_objects.append(tag_obj)
            form.instance.tags.set(tag_objects)

        return response

class EditTipView(UpdateView):
    model = Tip
    form_class = TipForm
    template_name = 'tips/tip-edit-page.html'
    context_object_name = 'tip'
    success_url = reverse_lazy('all_tips')

    def get_queryset(self):
        return Tip.objects.filter(author=self.request.user)

    def form_valid(self, form):
        form.instance.author = self.request.user
        response = super().form_valid(form)

        # Process tags
        tags_input = self.request.POST.get('tags')
        if tags_input:
            tags = [tag.strip() for tag in tags_input.split(',')]
            tag_objects = []
            for tag in tags:
                tag_obj, created = Tag.objects.get_or_create(name=tag)
                tag_objects.append(tag_obj)
            form.instance.tags.set(tag_objects)

        return response

class TipDetailView(DetailView):
    model = Tip
    template_name = 'tips/tip-view-page.html'
    context_object_name = 'tip'

    def get_object(self, queryset=None):
        # Ensure that the tip is accessible to all authenticated users, but only editable or deletable by the author or superuser
        obj = super().get_object(queryset)
        if obj.author != self.request.user and not self.request.user.is_superuser:
            # You can remove the restriction or just return the object for view purpose
            # raise PermissionDenied("You do not have permission to view this tip.")  # This line can be removed for non-sensitive views
            pass
        return obj

class TipDeleteView(DeleteView):
    model = Tip
    template_name = 'tips/tip-delete-page.html'
    context_object_name = 'tip'
    success_url = reverse_lazy('all_tips')  # Redirect to My Tips after deletion

    def get_queryset(self):
        # Ensure the tip is only deletable by the author or admin
        return Tip.objects.filter(author=self.request.user)

    def form_valid(self, form):
        # You can perform additional checks before deletion if needed
        return super().form_valid(form)

@login_required
def like_tip(request, pk):
    tip = get_object_or_404(Tip, pk=pk)
    if request.user in tip.dislikes.all():
        tip.dislikes.remove(request.user)
    if request.user not in tip.likes.all():
        tip.likes.add(request.user)
    return redirect('tip_detail', pk=tip.pk)

@login_required
def dislike_tip(request, pk):
    tip = get_object_or_404(Tip, pk=pk)
    if request.user in tip.likes.all():
        tip.likes.remove(request.user)
    if request.user not in tip.dislikes.all():
        tip.dislikes.add(request.user)
    return redirect('tip_detail', pk=tip.pk)

