from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.views import LoginView
from django.contrib import messages
from django.urls import reverse_lazy
from django.shortcuts import render, redirect
from django.views.generic.edit import FormView
from django.contrib.auth.decorators import login_required
from .models import YourModel  # Replace with actual model names for content
from django.contrib.auth.models import Group

# Register view
class RegisterView(FormView):
    template_name = 'accounts/register-page.html'
    form_class = UserCreationForm
    success_url = reverse_lazy('login')  # Redirect to login page after successful registration

    def form_valid(self, form):
        form.save()  # Save the user to the database
        return super().form_valid(form)

# Login view with custom error message
class CustomLoginView(LoginView):
    template_name = 'accounts/login-page.html'

    def form_invalid(self, form):
        messages.error(self.request, "Account or Password are not correct")
        return super().form_invalid(form)

# Authenticated users (Private part) can create and manage their content
@login_required
def create_content(request):
    if request.method == 'POST':
        # Handle form submission to create content
        pass
    return render(request, 'create_content.html')

@login_required
def edit_content(request, content_id):
    content = YourModel.objects.get(id=content_id)
    if request.user != content.owner:  # Ensuring only the content owner can edit
        return redirect('home')  # Redirect to home if unauthorized
    # Handle form submission to edit content
    return render(request, 'edit_content.html', {'content': content})